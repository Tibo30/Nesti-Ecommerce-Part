{% extends "base.html.twig" %}

{% block content %}

	<div class="all-recipes">
		<div class="recipes-tags">
			<h5>
				Filter by tags
			</h5>
			<div class="tags-recipes">
				{% for tag in tags %}
					{{ form_open(base_url())}}
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="{{tag.name |capitalize }}" {{tag.name == tagChosen ? "checked" : ""}}>
						<label class="form-check-label" for="inlineCheckbox1">{{tag.name}}</label>
					</div>
					{{ form_close() }}
				{% endfor %}
			</div>
		</div>

		<h1 class="recipes-title-selection"></h1>

		{{ include('/templates/all-recipes.html.twig')  }}

	
	</div>
{% endblock %}
{% block script %}
	<script>
		const ROOT2 = "{{ base_url() }}";
const csrf = document.querySelector('input[name="csrf_nesti"]');


// at the begining, all the checkboxes are unchecked unless the user comes from a click on a tag in Home page
var tagsChecked = []

var checkboxes = document.querySelectorAll(".form-check-input"); // get all the checkboxes

checkboxes.forEach(element => element.checked ? tagsChecked.push(element.value) : "");
// if the user comes from a click on a tag in Home page, we had the tag to the list
if (tagsChecked.length > 0) {
document.querySelector(".recipes-title-selection").innerHTML = "Here is our selection for " + tagsChecked.join(" & ") + " recipes";
} else {
document.querySelector(".recipes-title-selection").innerHTML = "Here is our selection of recipes";
}

// Add event listener on checkboxes
checkboxes.forEach((element, index) => element.addEventListener('change', (function (e) {
if (e.target.checked == true) { // check the value to true or false in the list according to the "checked" value (bool)
tagsChecked.push(e.target.value);
} else {
tagsChecked.splice(tagsChecked.indexOf(e.target.value), 1)
} recipesTagged(tagsChecked).then((response) => {
if (response) {
if (response.success && response.csrf_token) {

recipesCards = document.querySelector(".recipes-cards");
recipesCards.innerHTML = "";
recipesCards.innerHTML = response.html;

numPage = Math.ceil(response.recipes.length / 8)

recipeCards = document.querySelectorAll(".recipe-card");

pagination = document.querySelector(".btn-pagination-recipes");
pagination.innerHTML = "";
pagination.innerHTML = response.pagination;
if (tagsChecked.length > 0) {
document.querySelector(".recipes-title-selection").innerHTML = "Here is our selection for " + tagsChecked.join(" & ") + " recipes";
} else {
document.querySelector(".recipes-title-selection").innerHTML = "Here is our selection of recipes";
}

// Raffraichissement du CSRF
csrf.setAttribute('value', response.csrf_token);

}
}
});
})))


/**
     * Ajax request to get the recipes according to the tags checked
     * @param array tagsChecked
     * @returns mixed
     */
async function recipesTagged(tagsChecked) {

var myHeaders = new Headers();

let formData = new FormData();

formData.append('tags', JSON.stringify(tagsChecked));
formData.append(csrf.name, csrf.value);

var myInit = {
method: 'POST',
headers: myHeaders,
mode: 'cors',
cache: 'default',
body: formData
};

let response = await fetch(ROOT2 + '/recipes/tagged', myInit);
try {
if (response.ok) {
return await response.json();
} else {
return false;
}
} catch (e) {
console.error(e.message);
}
}

var current_page = 1;
var card_per_page = 8;
var numPage = {{ (recipes | length /8) | round(0,'ceil') }};

var recipeCards = document.querySelectorAll(".recipe-card");

function goPage(pageNumber) {
current_page = pageNumber;
changePage(pageNumber);
}


function prevPage() {
if (current_page > 1) {
current_page--;
changePage(current_page);
}
}

function nextPage() {
if (current_page < numPages()) {
current_page++;
changePage(current_page);
}
}

function changePage(page) {
var btn_next = document.getElementById("btn_next");
var btn_prev = document.getElementById("btn_prev");
var page_span = document.getElementById("page");

// Validate page
if (page < 1) {
page = 1;
}

if (page > numPages()) {
page = numPages();
}

recipeCards.forEach(function (element) {

if (element.getAttribute("data-number") >= ((page - 1) * card_per_page) && element.getAttribute("data-number") <= ((page * card_per_page) - 1)) {
element.hidden = false;
} else {
element.hidden = true;
}

scroll(0, 0)

})
}

function numPages() {
return numPage;
}
	</script>
{% endblock %}
