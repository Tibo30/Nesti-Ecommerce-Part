{% extends "base.html.twig" %}

{% block content %}

	<div class="recipeDetails">
		<div class="underLink">
			<a href="{{ base_url('/recipes')}}">
				<p>Recipe</p>
			</a>
			<p>
				&nbsp >
				{{recipe.recipe_name | capitalize}}
			</p>
		</div>

		<h1 class="recipeTitle">
			{{recipe.recipe_name | capitalize}}
		</h1>

		<div class="grade">
			{% set copyGrade = grade %}
			{% for i in range(1,5) %}
				<span class="fa-stack" style="width:1em">
					<i class="far fa-star fa-stack-1x"></i>
					{% if (copyGrade > 0) %}
						{% if (copyGrade > 0.5) %}
							<i class="fas fa-star fa-stack-1x"></i>
						{% else %}
							<i class="fas fa-star-half fa-stack-1x"></i>
						{% endif %}
					{% endif %}
					{% set copyGrade = (copyGrade - 1) %}
				</span>
			{% endfor %}
			<div class="grade-value">
				{{grade|round(1, 'ceil')}}/5
			</div>
		</div>

		<div class="recipe-picture" style='background-image: url("https://jolivet.needemand.com/realisations/nesti-admin/public/pictures/pictures/{{recipe.getPicture().name~"."~recipe.getpicture().extension }}");'></a>
	</div>

	<div class="recipe-info">
		<div class="recipe-info-element">
			<i class="far fa-clock" aria-hidden="true"></i>
			<p>{{recipe.time}}</p>
		</div>
		<div class="recipe-info-element">
			<i class="fa fa-utensils" aria-hidden="true"></i>
			<p>{{recipe.number_of_people}}</p>
		</div>
		<div class="recipe-info-element">
			<i class="fa fa-fire" aria-hidden="true"></i>
			<p>{{recipe.difficulty}}</p>
		</div>
	</div>

	<div class="recipe-ingredients">
		<div class="recipe-ingredients-title">
			Ingredients
		</div>
		<div class="recipe-list-ingredient">
			{% for recipeIngredient in recipeIngredients %}
				<div class="recipe-ingredient">
					{{recipeIngredient.quantity~" "~recipeIngredient.getUnitMeasure().name~" of "~recipeIngredient.getIngredient().product_name}}
				</div>
			{% endfor %}
		</div>

	</div>

	<div class="recipe-steps">
		<div class="recipe-steps-title">Preparation</div>
		<div class="recipe-list-steps">
			{% for paragraph in paragraphs %}
				<div class="recipe-step">
					<div class="recipe-step-order">Step
						{{paragraph.order_paragraph}}</div>
					<div class="recipe-step-content">{{paragraph.content}}</div>
				</div>
			{% endfor %}
		</div>
	</div>

	<div class="recipe-grade">
		<div>
			How do you rate this recipe ?
		</div>
		<div class="recipe-stars">
			{% for i in range(0,4) %}
				<span data-value={{5-i}} class="fa-stack grade-given" style="width:1em">
					&#9734
				</span>
			{% endfor %}
		</div>
	</div>

	<div class="recipe-comments">
		<div class="recipe-comments-title">
			Comments ({{comments|length}})
		</div>
		<div class="recipe-comments-content">
			{% set index=0 %}
			{% for comment in comments %}
				{% if index <2 %}
					<div class="recipe-comment">
					{% else %}
						<div class="recipe-comment-hidden" hidden>
						{% endif %}
						<div class="recipe-comment-user">
							{{comment.getUser().username}}
						</div>
						{% if comment.getUser().getGrade(recipe.id_recipes)[0] is not null %}
							{% set gradeUser = comment.getUser().getGrade(recipe.id_recipes)[0].grade %}
							<div class="recipe-comment-userGrade">
								{% set copyGradeUser = gradeUser %}
								{% for i in range(1,5) %}
									<span class="fa-stack" style="width:1em">
										<i class="far fa-star fa-stack-1x"></i>
										{% if (copyGradeUser > 0) %}
											{% if (copyGradeUser > 0.5) %}
												<i class="fas fa-star fa-stack-1x"></i>
											{% else %}
												<i class="fas fa-star-half fa-stack-1x"></i>
											{% endif %}
										{% endif %}
										{% set copyGradeUser = (copyGradeUser - 1) %}
									</span>
								{% endfor %}
								<div class="recipe-comment-grade">
									{{gradeUser}}/5
								</div>
							</div>
						{% endif %}
						<div class="recipe-comment-date">{{comment.creation_date|date("m/d/Y H:m:s")}}</div>
						<div class="recipe-comment-title">
							{{comment.comment_title}}
						</div>
						<div class="recipe-comment-content">{{comment.comment_content}}</div>
					</div>
					{% set index=index+1 %}
				{% endfor %}
				{% if comments|length >0 %}
					<div class="see-all-comments" data-hidden="false">
						See all comments
					</div>
				{% endif %}
				<div class="write-comments">
					<div class="write-comments-title">
						Write a comment
					</div>
					<div class="form-send-comment" hidden>
						{{ form_open(base_url())}}

						<textarea class="write-comment-area" rows="5" max-length="50" style="resize: none;"></textarea>
						<button type="submit">Send comment</button>

						{{ form_close() }}
					</div>
				</div>
			</div>
		</div>

	</div>
{% endblock %}

{% block script %}
	<script>
		allComments = document.querySelector(".see-all-comments");
const csrf = document.querySelector('input[name="csrf_nesti"]');

if (allComments != null) {
allComments.addEventListener('click', (function (e) {
if (allComments.getAttribute("data-hidden") == "false") {
document.querySelector(".recipe-comment-hidden").hidden = false;
allComments.setAttribute("data-hidden", "true");
allComments.innerHTML = "Hide comments";
} else if (allComments.getAttribute("data-hidden") == "true") {
document.querySelector(".recipe-comment-hidden").hidden = true;
allComments.setAttribute("data-hidden", "false")
allComments.innerHTML = "See all comments";
}
}))
}

writeComment = document.querySelector(".write-comments-title");

if (writeComment != null) {
writeComment.addEventListener('click', (function (e) {
document.querySelector(".form-send-comment").hidden = false
}))
}

grades = document.querySelectorAll(".grade-given");
// Add event listener on stars
grades.forEach((element, index) => element.addEventListener('click', (function (e) {
var log = "{{ session.logged }}";
if (log == "yes") {
var grade = element.getAttribute("data-value");
addGrade(grade).then((response) => {
if (response) {
if (response.success && response.csrf_token) {

alert("You gave a " + grade + " /5 to this recipe");
document.querySelector(".grade-value").innerHTML=Math.round(response.averageGrade * 10) / 10+"/5";

} else {
alert(response.error);
}
// Raffraichissement du CSRF

csrf.setAttribute('value', response.csrf_token);
}
});
} else {
window.location = ROOT + "/login";
}

})))

/**
     * Ajax request to add a grade
     * @param array tagsChecked
     * @returns mixed
     */
async function addGrade(grade) { // console.log(csrf);


var myHeaders = new Headers();

let formData = new FormData();

formData.append('grade', grade);
formData.append('id_recipe', "{{ recipe.id_recipes }}");
formData.append('id_user', "{{ session.id }}");

formData.append(csrf.name, csrf.value);


var myInit = {
method: 'POST',
headers: myHeaders,
mode: 'cors',
cache: 'default',
body: formData
};

let response = await fetch(ROOT + '/recipe/addgrade', myInit);
try {
if (response.ok) {
return await response.json();
} else {
return false;
}
} catch (e) {
console.error(e.message);
}


}
	</script>
{% endblock %}
